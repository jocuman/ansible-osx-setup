---
- hosts: localhost
  tasks:
    - include_vars: vars/versions.yml
    - name: Install homebrew
      include_role:
        name: geerlingguy.mac.homebrew

    - name: Make sure homebrew bin is in path
      ansible.builtin.lineinfile:
        path: /etc/paths
        state: present
        line: '/opt/homebrew/bin'
      become: true
      become_user: root

    - name: 'add custom homebrew repos'
      community.general.homebrew_tap:
        name: [
          heroku/brew,
          thoughtbot/formulae,
          hashicorp/tap,
          cloudflare/cloudflare,
          d12frosted/emacs-plus,
          macos-fuse-t/homebrew-cask
         ]
    - name: Install core packages via brew casks
      community.general.homebrew_cask:
        name: "{{ item }}"
      ignore_errors: yes
      with_items:
        - 1password
        - 1password-cli
        - brave-browser
        - cryptomator
        - docker
        - dropbox
        - font-fira-code
        - font-fira-mono
        - font-fira-sans
        - font-jetbrains-mono
        - fuse-t
        - fuse-t-sshfs
        - google-chrome
        - google-cloud-sdk
        - firefox
        - karabiner-elements
        - iterm2
        - libreoffice
        - ngrok
        - resilio-sync
        - tailscale
        - telegram
        - whatsapp
        - zoom

    - name: "Install homebrew packages"
      community.general.homebrew:
        name: [
          'ag',
          'age',
          'aichat',
          'asdf',
          'autoconf',
          'autojump',
          'automake',
          'aws-iam-authenticator',
          'awscli',
          'bfg',
          'cloudflare/cloudflare/cf-terraforming',
          'coreutils',
          'curl', 
          'direnv',
          'dnsmasq',
          'doctl',
          'fzf',
          'gcc',
          'gh',
          'gnu-time',
          'gpg',
          'hashicorp/tap/terraform',
          'htop',
          'imagemagick',
          'libb2',
          'libffi',
          'libtool',
          'libxslt',
          'libyaml',
          'mas',
          'mysql@8.0',
          'nmap',
          'nushell',
          'nvm',
          'openssl@3' ,
          'pkg-config',
          'rcm',
          'readline',
          'redis',
          'ripgrep',
          'sqlite3',
          'the_silver_searcher',
          'tmux',
          'unixodbc',
          'unzip',
          'vim',
          'watchman',
          'xz',
          'yarn',
          'zlib',
          'zsh',
        ]
        state: present
        update_homebrew: yes

    - name: "DNSMASQ: Get config directory"
      shell:
        cmd: echo "$(brew --prefix)/etc/"
      register: config_directory

    - name: Create dsnmasq config directory
      file:
        path: "{{ config_directory.stdout | trim }}"
        state: directory

    - name: Create dnsmasq config
      template:
        src: dnsmasq.conf.j2
        dest: "{{  config_directory.stdout | trim }}/dnsmasq.conf"

    - name: Create dnsmasq resolvers directory
      file:
        path: /etc/resolver/
        state: directory
      become: true

    - name: Create dnsmasq resolver
      template:
        src: local-resolver.j2
        dest: /etc/resolver/localhost
      become: true

    - name: Create dnsmasq test resolver
      template:
        src: local-resolver.j2
        dest: /etc/resolver/test
      become: true

    - name: Create dnsmasq latino topup config
      template:
        src: latino_topup.conf.j2
        dest: "{{  config_directory.stdout | trim }}/dnsmasq.d/latino_topup.conf"

    - name: "Install emacs"
      community.general.homebrew:
        name: emacs-plus
        state: present
        install_options: with-native-comp
        update_homebrew: yes

    - name: "Download Doom Emacs"
      ansible.builtin.git:
        clone: true
        repo: https://github.com/doomemacs/doomemacs
        depth: 1
        dest: "{{ lookup('env', 'HOME') }}/.config/emacs"

    - name: "Download all-the-icons"
      ansible.builtin.git:
        clone: true
        repo: https://github.com/domtronn/all-the-icons.el
        dest: /tmp/all-the-icons-fonts
      environment:
        GIT_TERMINAL_PROMPT: 0
        GIT_ASKPASS: /bin/true

    - name: "Copy all-the-icons-fonts"
      ansible.builtin.copy:
        src: /tmp/all-the-icons-fonts/fonts
        dest: "{{ lookup('env', 'HOME') }}/.local/share/fonts"
        backup: true

    - name: "Clean up /tmp/all-the-icons-fonts"
      ansible.builtin.file:
        path: /tmp/all-the-icons-fonts
        state: absent

    - name: "Download nerd-icons (NFM.ttf)"
      ansible.builtin.git:
        clone: true
        repo: https://github.com/rainstormstudio/nerd-icons.el
        dest: /tmp/nerd-icons-fonts
      environment:
        GIT_TERMINAL_PROMPT: 0
        GIT_ASKPASS: /bin/true

    - name: "Copy nerd-icons (NFM.ttf)"
      ansible.builtin.copy:
        src: /tmp/nerd-icons-fonts/fonts/NFM.ttf
        dest: "{{ lookup('env', 'HOME') }}/.local/share/fonts"
        backup: true

    - name: "Clean up /tmp/nerd-icons-fonts"
      ansible.builtin.file:
        path: /tmp/nerd-icons-fonts
        state: absent

    - name: "Install Doom Emacs"
      ansible.builtin.shell:
        cmd: "{{ lookup('env', 'HOME') }}/.config/emacs/bin/doom install --config --env --install --fonts --hooks --color --force"
      args:
        executable: /bin/bash
        
    - name: "Check if doom default config exists"
      ansible.builtin.stat:
        path: "{{ lookup('env', 'HOME') }}/.config/doom/"
      register: doom_original_config

    - name: Delete content & directory of original config
      ansible.builtin.file:
        state: absent
        path: "/Users/{{ lookup('env', 'USER') }}/.config/doom"
      when: doom_original_config.stat.isdir is defined and doom_original_config.stat.islnk is defined and doom_original_config.stat.isdir and doom_original_config.stat.islnk == False

    - name: Create doom config symbolic link
      file:
        src: /Users/jorge/Library/Mobile Documents/com~apple~CloudDocs/arbeitsstation/config/doom
        dest: "/Users/{{ lookup('env', 'USER') }}/.config/doom"
        state: link

    - name: "Run doom sync"
      ansible.builtin.shell:
        cmd: "{{ lookup('env', 'HOME') }}/.config/emacs/bin/doom sync"
      args:
        executable: /bin/bash

    - name: "Install from Mac app store"
      shell: mas install {{ item }}
      with_items:
        - 497799835 # xcode
        - 441258766 # magnet
        - 1451685025 # wireguard
        - 1569813296 # 1password for safari
        
    - name: Get the path to ZSH
      become: false
      local_action: command which zsh
      register: zsh_path

    - name: "Ensure homebrew zsh is in allowed shells"
      lineinfile:
        path: /etc/shells
        line: "{{ zsh_path.stdout }}"
      become: true

    - name: Install Oh My ZSH
      shell: sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
      args:
        creates: "/Users/{{ lookup('env', 'USER') }}/.oh-my-zsh"

    - name: Set ZSH as the default shell
      shell: chsh -s $(which zsh) {{ lookup('env', 'USER') }}
      become: true

    - name: "Create a default ZSH configuration"
      template:
        src: templates/.zshrc.j2
        dest: /Users/{{ lookup('env', 'USER') }}/.zshrc
        owner: "{{ lookup('env', 'USER') }}"
        force: yes

    - git:
        repo: https://github.com/romkatv/powerlevel10k.git
        depth: 1
        dest: "/Users/{{ lookup('env', 'USER') }}/.oh-my-zsh/themes/powerlevel10k"

    - name: Create p10k ymbolic link
      file:
        src: /Users/jorge/Library/Mobile Documents/com~apple~CloudDocs/arbeitsstation/p10k.zsh
        dest: "/Users/{{ lookup('env', 'USER') }}/.p10k.zsh"
        state: link

    - name: Create zshrc.personal.after symbolic link
      file:
        src: /Users/jorge/Library/Mobile Documents/com~apple~CloudDocs/arbeitsstation/zshrc
        dest: "/Users/{{ lookup('env', 'USER') }}/.zshrc.personal.after"
        state: link

    - name: Create zshenv symbolic link
      file:
        src: /Users/jorge/Library/Mobile Documents/com~apple~CloudDocs/arbeitsstation/zshenv
        dest: "/Users/{{ lookup('env', 'USER') }}/.zshenv"
        state: link

    - name: Create ssh config symbolic link
      file:
        src: /Users/jorge/Library/Mobile Documents/com~apple~CloudDocs/arbeitsstation/ssh/config
        dest: "/Users/{{ lookup('env', 'USER') }}/.ssh/config"
        state: link
        
    - name: "Create a default asdf configuration"
      template:
        src: templates/.asdfrc.j2
        dest: /Users/{{ lookup('env', 'USER') }}/.asdfrc
        owner: "{{ lookup('env', 'USER') }}"
        force: yes

    - name: "Install asdf plugins"
      shell: |
        source /Users/{{ lookup('env', 'USER') }}/.asdf/asdf.sh
        asdf plugin-add {{ item }} || exit 0
      with_items:
        - ruby
        - nodejs
        - python

    - name: "Install Default Python"
      shell: |
        source /Users/{{ lookup('env', 'USER') }}/.asdf/asdf.sh
        asdf install python '{{ python_version }}'
        asdf global python '{{ python_version }}'
        pip3 install ansible
        asdf reshim python

    - name: "Install Default Ruby"
      shell: |
        source /Users/{{ lookup('env', 'USER') }}/.asdf/asdf.sh
        asdf install ruby '{{ ruby_version }}'
        asdf global ruby '{{ ruby_version }}'
        gem install bundler
        gem install cocoapods
        gem install rubocop
        gem install solargraph

    - name: "Install default node"
      shell: |
        source /Users/{{ lookup('env', 'USER') }}/.asdf/asdf.sh
        bash /Users/{{ lookup('env', 'USER') }}/.asdf/plugins/nodejs/bin/import-release-team-keyring
        asdf install nodejs latest
        asdf global nodejs latest

    - name: Create aws config directory
      file:
        path: /Users/{{ lookup('env', 'USER') }}/.aws
        state: directory

    - name: "Create a default AWS configuration"
      template:
        src: templates/aws_config.j2
        dest: /Users/{{ lookup('env', 'USER') }}/.aws/config
        owner: "{{ lookup('env', 'USER') }}"
        force: yes

    - name: "Create AWS credentials from vault"
      template:
        src: vaults/aws.j2
        dest: /Users/{{ lookup('env', 'USER') }}/.aws/credentials
        owner: "{{ lookup('env', 'USER') }}"
        force: yes

    - name: Create ngrok config directory
      file:
        path: /Users/{{ lookup('env', 'USER') }}/Library/Application Support/ngrok
        state: directory

    - name: "Create ngrok config file"
      template:
        src: vaults/ngrok.yml.j2
        dest: /Users/{{ lookup('env', 'USER') }}/Library/Application Support/ngrok/ngrok.yml
        owner: "{{ lookup('env', 'USER') }}"
        force: yes

    - name: Create iterm scripts directory
      file:
        path: /Users/{{ lookup('env', 'USER') }}/Library/Application Support/iTerm2/Scripts
        state: directory

    - name: "Add iterm default scripts"
      template:
        src: "{{ item }}"
        dest: /Users/{{ lookup('env', 'USER') }}/Library/Application Support/iTerm2/Scripts/{{ item | basename | regex_replace('\.j2$', '') }}
        owner: "{{ lookup('env', 'USER') }}"
        force: yes
      with_fileglob:
        - templates/iterm_scripts/*.j2

    - name: re-generate bins now we've installed some yarn packages
      shell: asdf reshim nodejs

    - name: Notes
      debug:
        msg: "Remember to start mysql, redis and dnsmasq"

    - name: Notes
      debug:
        msg: "Remember must be started with sudo, e.g. sudo brew services start dnsmasq"
